openapi: "3.0.0"
info:
  version: 1.0.0
  title: Rytmi Codento Management System
  license:
    name: MIT
servers:
  - url: https://rytmi.codento.fi/v1
paths:
  /users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      parameters:
      responses:
        '200':
          description: An array of users for admins
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        '403':
          description: Not authorized error
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: User creation for admins
      operationId: createUser
      parameters:
        requestBody:
          description: User to add
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - users
      responses:
        '201':
          description: Created user
          headers:
          content:
            application/json:
              schema:
                "#/components/schemas/User"
        '403':
          description: Not authorized error
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: User with specified username already exists
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userId}:
    get:
      summary: Show specific user
      operationId: showUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '403':
          description: Not authorized error
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Modify user information
      operationId: modifyUser
      tags:
        - users
      parameters:
        requestBody:
          description: New user information, only the parts that are changed.
          required: true
          content:
            application/json:
              schema:
                "#/components/schemas/User"
      responses:
        '200':
          description: Modified user
          headers:
          content:
            application/json:
              schema:
                "#/components/schemas/User"
        '403':
          description: Not authorized
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: User does not exist
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: User with specified username already exists
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /profiles:
    get:
      summary: List all active profiles
      operationId: listProfiles
      tags:
        - profiles
      parameters:
      responses:
        '200':
          description: An array of profiles
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profiles"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: User creation for admins
      operationId: createUser
      parameters:
        requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      tags:
        - users
      responses:
        '201':
          description: Created user
          headers:
          content:
          application/json:
          schema:
            "#/components/schemas/User"
          '403':
            description: Not authorized error
            headers:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          '409':
            description: User with specified username already exists
            headers:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Error"
  /profiles/all:
    get:
      summary: List all profiles
      operationId: listAllProfiles
      tags:
        - profiles
      parameters:
      responses:
        '200':
          description: An array of all profiles for admins
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profiles"
  /profiles/{profileId}:
    get:
      summary: Show single profile
      operationId: showProfile
      tags:
        - profiles
      parameters:
      responses:
        '200':
          description: Profile information
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
    put:
      summary: Modify profile
      operationId: modifyProfile
      tags:
        - profiles
      parameters:
        requestBody:
          description: New profile information, only the parts that are changed.
          required: true
          content:
            application/json:
              schema:
                "#/components/schemas/Profile"
      responses:
        '200':
          description: Full object containing updated profile
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"

  /profiles/{profileId}/skills:
    get:
      summary: Show profile's skills
      operationId: showProfileSkills
      tags:
        - profileskills
      parameters:
      responses:
        '200':
          description: Array containing profile's skills
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileSkills"
    post:
      summary: Add new skill to profile
      operationId: addProfileSkill
      parameters:
        requestBody:
          description: Skill to add to profile
          required: true
          content:
            application/json:
              schema:
                "#/components/schemas/User"
      tags:
        - profileskills
      responses:
        '201':
          description: Created user and profile
          headers:
          content:
            application/json:
              schema:
                "#/components/schemas/User"
        '403':
          description: Not authorized error
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Specified skill does not exist
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: Specified skill already exists
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /profiles/{profileId}/skills/{skillId}:
    get:
      summary: Show single profile-skill
      operationId: showProfileSkill
      tags:
        - profileskills
      parameters:
      responses:
        '200':
          description: Profile-skill information
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileSkill"
    put:
      summary: Modify profileskill
      operationId: modifyProfileSkill
      tags:
        - profileskills
      parameters:
        requestBody:
          description: New profile-skill information.
          required: true
          content:
            application/json:
              schema:
                "#/components/schemas/Profile"
      responses:
        '200':
          description: Full object containing updated profile-skill
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileSkill"
    delete:
      summary: Delete profile-skill
      operationId: deleteProfileSkill
      tags:
        - profileskills
      parameters:
      responses:
        '204':
          description: Confirmation that profile-skill was deleted
          headers:

  /profiles/{profileId}/projects:
    get:
      summary: Show project-profiles related to specified profile
      operationId: showProfileProjects
      tags:
        - projectprofiles
      parameters:
      responses:
        '200':
          description: Project-profiles in array
          headers:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectProfiles"

  /clients:
    get:
    post:
  /clients/{clientId}:
    get:
    put:

  /projects:
    get:
    post:
  /projects/current:
    get:
  /projects/{projectId}:
    get:
    put:
  /projects/{projectId}/skills:
    get:
    post:
  /projects/{projectId}/skills/{skillId}:
    get:
    put:
    delete:
  /projects/{projectId}/profiles:
    get:
    post:
  /projects/{projectId}/profiles/current:
    get:
  /projects/{projectId}/profiles/{profileId}:
    get:
    put:

  /skills:
    get:
    post:
  /skills/{skillId}:
    get:
    put:

components:
  schemas:
    User:
      required:
        - id
        - username
        - password (only when changing or creating user, never returned)
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        birthday:
          type: date
        active:
          type: boolean

    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"

    Profile:
    Profiles:
      type: array
      items:
        $ref: "#/components/schemas/Profile"

    Skill:
    Skills:
      type: array
      items:
        $ref: "#/components/schemas/Skill"

    ProfileSkill:
    ProfileSkills:
      type: array
      items:
        $ref: "#/components/schemas/ProfileSkill"

    Client:
    Clients:
      type: array
      items:
        $ref: "#/components/schemas/Client"

    Project:
    Projects:
      type: array
      items:
        $ref: "#/components/schemas/Project"

    ProjectProfile:
    ProjectProfiles:
      type: array
      items:
        $ref: "#/components/schemas/ProjectProfile"

    ProjectHour:
    ProjectHours:
      type: array
      items:
        $ref: "#/components/schemas/ProjectHour"

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
